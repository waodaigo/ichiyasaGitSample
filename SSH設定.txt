ssh-keygen -t rsa -b 4096 -C "wao_daigo@yahoo.co.jp"

パスワード：waowao

鍵の生成先
/c/Users/daigo/.ssh/id_rsa
以下に移動
C:\Git\waodaigo\GitHub\GitBash\.ssh
/c/Git/waodaigo/GitHub/GitBash/.ssh/id_rsa.pub




ssh-keygenコマンドを実行すると、デフォルトでは.sshディレクトリ内にid_rsa（秘密鍵）とid_rsa.pub（公開鍵）の2つのファイルが生成されます。ただし、Windowsの場合、.sshディレクトリが隠しフォルダとして扱われるため、エクスプローラーからは直接アクセスできません。

id_rsaファイルには秘密鍵が含まれており、セキュリティ上の理由からその内容は表示されません。パスワードの設定に関しても、通常は鍵ペアの生成時に設定することができますが、設定しない場合は何も表示されません。

.sshディレクトリやその中のファイルにアクセスするには、エクスプローラーのアドレスバーに直接パスを入力してアクセスするか、コマンドラインからアクセスする必要があります。例えば、コマンドプロンプトやPowerShellからは次のようにしてアクセスできます。


cd ~/.ssh
また、鍵ファイルの内容を表示するには、以下のコマンドを使用します。ただし、これはセキュリティ上のリスクがあるため、注意してください。

cat ~/.ssh/id_rsa




複数のGitHubアカウントを使用する場合、異なるアカウントごとに異なるSSH鍵を使用することが推奨されます。そのため、.sshディレクトリ内に複数の鍵を管理する方法や、それを使って複数のアカウントを切り替える方法について説明します。

1.鍵ファイルの管理と移動:
.sshディレクトリから鍵ファイルを別のディレクトリに移動させても問題ありません。移動させた後は、ssh-keygenコマンドで新しい鍵を生成することができます。
ただし、鍵ファイルを移動させる際には、そのディレクトリに適切なアクセス権を持っていることを確認してください。

2.複数の鍵ファイルを使ったアカウントの切り替え:
複数の鍵ファイルを使って異なるGitHubアカウントを切り替えることができます。この場合、~/.ssh/configファイルを使用して、どの鍵をどのホストに使用するかを設定する必要があります。
configファイルには、以下のような設定を追加します。


# ホスト github.com の設定
Host github.com
    IdentityFile ~/.ssh/id_rsa # デフォルトの鍵

# ホスト別の設定（別のGitHubアカウント用）
Host github.com-other
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_other # 別の鍵


コマンドでアカウントを切り替える際には、git cloneやgit remote set-urlなどのコマンドでホスト名を指定してアクセスします。


git clone git@github.com-other:ユーザー名/リポジトリ.git


3.コマンドでのファイル移動:
コマンドラインからファイルを移動するには、mvコマンドを使用します。例えば、id_rsaを移動させる場合は、以下のようにします。

mv ~/.ssh/id_rsa /移動先のディレクトリ
これらの方法を使って、複数のGitHubアカウントを切り替えながら、それぞれのアカウントに対応した鍵を管理することができます。






